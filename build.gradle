plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'com.modrinth.minotaur'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

String modVersion
if (System.getenv("RELEASE_TAG") != null) {
    String releaseTag = System.getenv("RELEASE_TAG")
    modVersion = releaseTag.substring(1)
    println("Detected Release Version: $modVersion")
} else {
    modVersion = project.mod_version
    println("Detected Local Version: $modVersion")
}

archivesBaseName = project.archives_base_name
version = modVersion
group = project.maven_group

repositories {
    maven {
        // EMI & Mod Menu
        name "TerraformersMC"
        url "https://maven.terraformersmc.com/releases/"
    }
    maven {
        // TechReborn
        name "CurseMaven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name "CottonMC"
        url "https://server.bbkr.space/artifactory/libs-release"
    }

    maven {
        url = "https://jitpack.io"
        content {
            includeGroup "com.github.Technici4n"
            includeGroup "com.github.Draylar"
            includeGroup "com.github.GabrielOlvH"
            includeGroup "com.github.Draylar.omega-config"
            includeGroup "com.github.emilyploszaj"
        }
    }

    maven {
        name = "Cafeteria Development"
        url = 'https://maven.cafeteria.dev/releases'
        content {
            includeGroup 'dev.cafeteria'
            includeGroup 'me.luligabi'
            includeGroup 'net.adriantodt.fabricmc'
        }
    }
}

dependencies {
    dependencies.ext.lib = { dep, optional = false ->
        modCompileOnly(dep) {
            exclude group: "net.fabricmc.fabric-api"
            exclude group: "com.jamieswhiteshirt"
            exclude group: "io.github.prospector"
        }
        modRuntimeOnly(dep) {
            exclude group: "net.fabricmc.fabric-api"
            exclude group: "com.jamieswhiteshirt"
            exclude group: "io.github.prospector"
        }
        if (!optional) {
            include(dep) {
                exclude group: "net.fabricmc.fabric-api"
                exclude group: "com.jamieswhiteshirt"
                exclude group: "io.github.prospector"
            }
        }
    }

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // EMI
    modImplementation("dev.emi:emi:${project.emi_version}") {
        transitive = false
    }


    // Tech Reborn
    modCompileOnly "curse.maven:techreborn-233564:${project.tech_reborn_id}"
    modRuntimeOnly "curse.maven:techreborn-233564:${project.tech_reborn_id}"
    modCompileOnly "curse.maven:reborncore-237903:${project.reborn_core_id}"
    modRuntimeOnly "curse.maven:reborncore-237903:${project.reborn_core_id}"
    modCompileOnly "teamreborn:energy:${project.energy_version}"
    modRuntimeOnly "teamreborn:energy:${project.energy_version}"

    // Mod Menu
    modRuntimeOnly "com.terraformersmc:modmenu:${project.mod_menu_version}"

    // Industrial Revolution
    dependencies.ext.lib "curse.maven:industrial-revolution-391708:${project.industrial_rev_id}"
    dependencies.ext.lib "curse.maven:industrial-revolution-391708:${project.industrial_rev_id}"
    dependencies.ext.lib "net.fabricmc:fabric-language-kotlin:${project.kotlin_version}"
    dependencies.ext.lib "net.fabricmc:fabric-language-kotlin:${project.kotlin_version}"
    dependencies.ext.lib "io.github.cottonmc:LibGui:${project.libgui_version}"
    dependencies.ext.lib "io.github.cottonmc:LibGui:${project.libgui_version}"
    dependencies.ext.lib "dev.cafeteria:fake-player-api:${project.fake_player_version}"
    dependencies.ext.lib "dev.cafeteria:fake-player-api:${project.fake_player_version}"
    dependencies.ext.lib "com.github.GabrielOlvH:magna:${project.magna_version}"
    dependencies.ext.lib "com.github.GabrielOlvH:magna:${project.magna_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.mrProjectId
    versionNumber = modVersion
    versionType = project.mrVeresionType
    def file = rootProject.file("changelogs/changelog-v${modVersion}.md")
    if (file.exists()) {
        changelog = file.text
    }
    uploadFile = tasks.remapJar
    additionalFiles = [tasks.sourcesJar]
    gameVersions = project.mrGameVersions.split("\\s*,\\s*").toList()
    loaders = project.mrLoaders.split("\\s*,\\s*").toList()
    dependencies {
        for (final def projectId in project.mrDependencies.split("\\s*,\\s*")) {
            required.project projectId
        }
    }
    syncBodyFrom = rootProject.file("README.md").text
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        if (System.getenv("PUBLISH_REPO") != null) {
            maven {
                name = "publishRepo"
                url = uri(System.getenv("PUBLISH_REPO"))
            }
        }
    }
}
